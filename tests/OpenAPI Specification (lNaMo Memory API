openapi: 3.0.3
info:
  title: NaMo Memory API
  version: 2.1.0
  description: |
    Memory management system for NaMo AI with Dharma principles integration.
    Integrated with Google Cloud infrastructure for practical deployment.
    
    Infrastructure Stack:
    - Frontend: Apigee API Hub
    - Processing: Vertex AI Agent Engine
    - Storage: BigQuery (long-term), Firestore (short-term)
    - Deployment: Cloud Run

servers:
  - url: https://{apigee-domain}/namo/memory
    description: Apigee API Hub endpoint
    variables:
      apigee-domain:
        default: api.your-company.com
        description: Your Apigee domain name

components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    googleOAuth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            - https://www.googleapis.com/auth/cloud-platform

  schemas:
    MemoryRecord:
      type: object
      properties:
        id: { type: string, format: uuid }
        content: { type: string }
        type: { type: string, enum: [short-term, long-term, contextual] }
        emotion_context:
          type: object
          properties:
            sentiment_score: { type: number, minimum: -1, maximum: 1 }
            emotion_type: { type: string, enum: [metta, karuna, mudita, upekkha, neutral] }
            intensity: { type: integer, minimum: 1, maximum: 10 }
        dharma_tags:
          type: array
          items: { type: string, enum: [anicca, dukkha, anatta, metta, karuna, mudita, upekkha] }
        timestamp: { type: string, format: date-time }
        expiration_time: { type: string, format: date-time }

    MemoryStorageRequest:
      type: object
      required: [content, type]
      properties:
        content: { type: string }
        type: { type: string, enum: [short-term, long-term, contextual] }
        session_id: { type: string }
        emotion_context: { $ref: '#/components/schemas/MemoryRecord/properties/emotion_context' }
        dharma_tags: { $ref: '#/components/schemas/MemoryRecord/properties/dharma_tags' }

    MemoryQuery:
      type: object
      properties:
        query: { type: string }
        memory_types:
          type: array
          items: { type: string, enum: [short-term, long-term, contextual] }
        emotion_filter: { $ref: '#/components/schemas/MemoryRecord/properties/emotion_context' }
        dharma_tags: { $ref: '#/components/schemas/MemoryRecord/properties/dharma_tags' }
        time_range:
          type: object
          properties:
            start_time: { type: string, format: date-time }
            end_time: { type: string, format: date-time }
        limit: { type: integer, maximum: 100, default: 10 }

    BatchMemoryOperation:
      type: object
      properties:
        operations:
          type: array
          items:
            type: object
            properties:
              operation_type: { type: string, enum: [store, update, delete] }
              memory_data: { $ref: '#/components/schemas/MemoryStorageRequest' }
              memory_id: { type: string }

paths:
  /store:
    post:
      summary: Store memory
      description: Store memory in Firestore (short-term) or BigQuery (long-term).
      security: [{ apiKeyAuth: [] }, { googleOAuth: [cloud-platform] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MemoryStorageRequest' }
      responses:
        "200": { description: Memory stored }

  /recall:
    post:
      summary: Recall memories
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MemoryQuery' }
      responses:
        "200": { description: Memories retrieved }

  /batch:
    post:
      summary: Batch memory operations
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BatchMemoryOperation' }
      responses:
        "200": { description: Batch completed }

  /sessions/{sessionId}:
    delete:
      summary: Clear session memories
      parameters:
        - name: sessionId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Session cleared }

  /stats:
    get:
      summary: Memory statistics
      responses:
        "200": { description: Stats retrieved }

  /dharma/insights:
    get:
      summary: Dharma insights
      parameters:
        - name: pattern_type
          in: query
          schema: { type: string, enum: [karmic, emotional, behavioral] }
        - name: time_window
          in: query
          schema: { type: string, enum: [day, week, month, all] }
      responses:
        "200": { description: Insights generated }

  /emotion/profile:
    get:
      summary: Emotional profile
      parameters:
        - name: timeframe
          in: query
          schema: { type: string, enum: [session, day, week, custom] }
        - name: user_id
          in: query
          schema: { type: string }
      responses:
        "200": { description: Profile generated }